package com.androidhuman.example.CameraPreview;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.nio.ShortBuffer;

import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;

import org.opencv.core.CvType;
import org.opencv.core.Mat;

import android.app.Activity;
import android.content.Context;
import android.hardware.Camera;
import android.hardware.Camera.PreviewCallback;
import android.opengl.GLES20;
import android.opengl.GLSurfaceView.Renderer;
import android.util.Log;

public class GLRenderer implements Renderer, PreviewCallback {
	//어디서 붙어 데이터를 받는지 알아오기
	//YUV420에서 640x480 = 307200 이렇게 됨. 거기서 307200이 Y 데이터이고 u와 v는 76800이다.
	//그렇기 때문에 U데이터는 307200 부터는 U 데이터이다.
	private static final int  V_INDEX = 307200;
	//30720 + 76800 =  384000
	//384000 부터 460799 까지 v 데이터다.
	private static final int U_INDEX= 384000;
	//y는 왠지 모르지만 460800으로함?//여기서 문제가 발생할 수도 있겠다.
	private static final int LENGTH = 307200;//460800;//307200//115200;
	private static final int LENGTH_4 = 76800;//153600;//115200;//28800;//19200;

	//
	private static final int LENGTH_PIXEL = 640*480*3;//153600;//115200;//28800;//19200;
	
	//엑티비티 프로그램(String으로 짠) 것을 가져오기위한 액티비티이다.(이외에는 쓸모가 없다)
	private Activity activity;

	//좌표를 나타내는 버퍼임.
	private FloatBuffer mVertices;
	//인덱스를 나타내는 버퍼임.
	private ShortBuffer mIndices;

	//하드웨어 카메라 사이즈 640x480으로 맞춘것
	//스마트폰마다 지원하지 않는 놈들도 있음.
	private int previewFrameWidth = 640;
	private int previewFrameHeight = 480;
	
	//프로그램 핸들러.
	private int mProgramObject;
	//vertext 핸들러.
	private int mPositionLoc;
	//텍스쳐 핸들러.
	private int mTexCoordLoc;
//	private int mSamplerLoc;
	
	//y,u,v각각의 텍스쳐 핸들러임.
	private int yTexture;
	private int uTexture;
	private int vTexture;

	
    static final int COORDS_PER_VERTEX = 5;
    private final int vertexStride = COORDS_PER_VERTEX * 4; // bytes per vertex
	private final float[] mVerticesData = { 
	//postion x, y, z 
			-1.f, 1.f, 0.0f, // Position 0
			0.0f, 0.0f, // TexCoord 0
			
			-1.f, -1.f, 0.0f, // Position 1
			0.0f, 1.0f, // TexCoord 1
			
			1.f, -1.f, 0.0f, // Position 2
			1.0f, 1.0f, // TexCoord 2
			
			1.f, 1.f, 0.0f, // Position 3
			1.0f, 0.0f // TexCoord 3
	};
	/**
	 * (-1,1,0) <0>             (1,1,0) <3>    
	 * 
	 *                 0,0,0
	 * 
	 * (-1,-1,0) <1>            (1,-1,0) <2>*/

	//아마 vertext 용일 듯.
	private final short[] mIndicesData =
		{ 
			0, 1, 2,   //좌하 삼각형
			0, 2, 3    //우상 삼각형 
		};  

	//GL용 buffer임.
	private ByteBuffer yBuffer;
	private ByteBuffer uBuffer;
	private ByteBuffer vBuffer;
	private ByteBuffer mReadPixels;

	//카메라에서 들어오는 데이터는 byte배열이기 때문에 우선 여기 저장해야함.
	byte[] yData = new byte[LENGTH];
	byte[] uData = new byte[LENGTH_4];
	byte[] vData = new byte[LENGTH_4];
	

	//생성자.
	public GLRenderer(CameraPreview cameraPreview) {
		
		this.activity = cameraPreview;

		mVertices = ByteBuffer.allocateDirect(mVerticesData.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();
		/*mVertices.put(mVerticesData); mVertices.position(0);*/
		mVertices.put(mVerticesData).position(0);

		mIndices = ByteBuffer.allocateDirect(mIndicesData.length * 2).order(ByteOrder.nativeOrder()).asShortBuffer();
		mIndices.put(mIndicesData).position(0);

		yBuffer = GraphicsUtil.makeByteBuffer(LENGTH);
		uBuffer = GraphicsUtil.makeByteBuffer(LENGTH_4);
		vBuffer = GraphicsUtil.makeByteBuffer(LENGTH_4);
		mReadPixels = GraphicsUtil.makeByteBuffer(LENGTH_PIXEL);
	}

	/**fps측정 변수*/
    int fps = 0;
    int frames = 0;
    long totalTime = 0;
    long currentTime = System.currentTimeMillis();
    long lastTime = currentTime;
    /***/
	@Override
	public final void onDrawFrame(GL10 gl) {
		
		
		
		// Clear the color buffer
		GLES20.glClearColor(.0f, .0f, .0f, 1.0f);
		GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT|GLES20.GL_DEPTH_BUFFER_BIT);

		// Use the program object
		GLES20.glUseProgram(mProgramObject);

		// Load the vertex position
		mVertices.position(0);
		GLES20.glVertexAttribPointer(mPositionLoc, 3, GLES20.GL_FLOAT, false, vertexStride, mVertices);
		GLES20.glEnableVertexAttribArray(mPositionLoc);
		
		
		
		//Y 
		GLES20.glUniform1i(yTexture, 0);
		/**삽입하라는 문구*/
		GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
		GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, yTexture);
		/**삽입하라는 문구*/
		GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);
		GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);
		GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_REPEAT);
		GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_REPEAT);
		GLES20.glTexImage2D(   GLES20.GL_TEXTURE_2D, 0, GLES20.GL_LUMINANCE, previewFrameWidth, previewFrameHeight, 0, GLES20.GL_LUMINANCE, GLES20.GL_UNSIGNED_BYTE, yBuffer);
		
		//U
		GLES20.glUniform1i(uTexture, 1);
		/**삽입하라는 문구*/
		GLES20.glActiveTexture(GLES20.GL_TEXTURE1);
		GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, uTexture);
		/**삽입하라는 문구*/
		GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);
		GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);
		GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_REPEAT);
		GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_REPEAT);
		GLES20.glTexImage2D(   GLES20.GL_TEXTURE_2D, 0, GLES20.GL_LUMINANCE, previewFrameWidth/2, previewFrameHeight/2, 0, GLES20.GL_LUMINANCE, GLES20.GL_UNSIGNED_BYTE, uBuffer);
		
		
		//V
		GLES20.glUniform1i(vTexture, 2);
		/**삽입하라는 문구*/
		GLES20.glActiveTexture(GLES20.GL_TEXTURE2);
		GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, vTexture);
		/**삽입하라는 문구*/
		GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);
		GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);
		GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_REPEAT);
		GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_REPEAT);
		GLES20.glTexImage2D(   GLES20.GL_TEXTURE_2D, 0, GLES20.GL_LUMINANCE, previewFrameWidth/2, previewFrameHeight/2, 0, GLES20.GL_LUMINANCE, GLES20.GL_UNSIGNED_BYTE, vBuffer);
		


		// Load the texture coordinate
		mVertices.position(3);
		GLES20.glVertexAttribPointer(mTexCoordLoc, 2, GLES20.GL_FLOAT, false, vertexStride, mVertices);
		GLES20.glEnableVertexAttribArray(mTexCoordLoc);
		
		//Draw...
		GLES20.glDrawElements(GLES20.GL_TRIANGLES, 6, GLES20.GL_UNSIGNED_SHORT, mIndices);
		
		//readPixell
//		GLES20.glReadPixels(0, 0, previewFrameWidth, previewFrameHeight, GLES20.GL_RGB, GLES20.GL_UNSIGNED_BYTE, pixels)
//		GLES20.glReadPixels(0, 0, previewFrameWidth, previewFrameHeight, GLES20.GL_RGB, GLES20.GL_BYTE, mReadPixels);
		
//		byte[] b = new byte[mReadPixels.remaining()];
//		mReadPixels.get(b, 0, b.length);
//		if(b.length>60)
//		Log.i("READPX", "byte?:"+b[0]+b[10]+b[20]+b[30]+b[40]+b[50]);
	}
	
	@Override
	public void onSurfaceChanged(GL10 gl, int width, int height) {
		GLES20.glViewport(0, 0, width, height);
	}

	@Override
	public void onSurfaceCreated(GL10 gl, EGLConfig config) {

		//1.  Define a simple shader program for our point.
		final String vShaderStr = readTextFileFromRawResource(activity, R.raw.v_simple);
		final String fShaderStr = readTextFileFromRawResource(activity, R.raw.f_convert);

		// Load the shaders and get a linked program object
		mProgramObject = loadProgram(vShaderStr, fShaderStr);

		// attribute에 관한 주소 값을 가져옴. : Get the attribute locations 
		// vertex shader에서 사용함.
		
		mPositionLoc = GLES20.glGetAttribLocation(mProgramObject, "a_position");
		mTexCoordLoc = GLES20.glGetAttribLocation(mProgramObject, "a_texCoord");

		//2. GLES20.glEnable   ( GLES20.GL_DEPTH_TEST );
		/**nothing*/
		
		//2차원 텍스쳐를 사용할 수 있도록함.
		GLES20.glEnable(GLES20.GL_TEXTURE_2D);
		
		//
		yTexture = GLES20.glGetUniformLocation(mProgramObject, "y_texture");
//		int[] yTextureNames = new int[1];
//		GLES20.glGenTextures(1, yTextureNames, 0);
//		int yTextureName = yTextureNames[0];

//		GLES20.glEnable(GLES20.GL_TEXTURE_2D);
		uTexture = GLES20.glGetUniformLocation(mProgramObject, "u_texture");
//		int[] uTextureNames = new int[1];
//		GLES20.glGenTextures(1, uTextureNames, 0);
//		int uTextureName = uTextureNames[0];

//		GLES20.glEnable(GLES20.GL_TEXTURE_2D);
		vTexture = GLES20.glGetUniformLocation(mProgramObject, "v_texture");
//		int[] vTextureNames = new int[1];
//		GLES20.glGenTextures(1, vTextureNames, 0);
//		int vTextureName = vTextureNames[0];


		
	}

	public void setPreviewFrameSize(int realWidth, int realHeight) {
		previewFrameHeight = realHeight;
		previewFrameWidth = realWidth;
	}

	public static String readTextFileFromRawResource(final Context context, final int resourceId) {
		final InputStream inputStream = context.getResources().openRawResource(resourceId);
		final InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
		final BufferedReader bufferedReader = new BufferedReader(inputStreamReader);

		String nextLine;
		final StringBuilder body = new StringBuilder();

		try {
			while ((nextLine = bufferedReader.readLine()) != null) {
				body.append(nextLine);
				body.append('\n');
			}
		} catch (IOException e) {
			return null;
		}

		return body.toString();
	}

	public static int loadShader(int type, String shaderSrc) {
		int shader;
		int[] compiled = new int[1];

		// Create the shader object
		shader = GLES20.glCreateShader(type);
		if (shader == 0) {
			return 0;
		}
		// Load the shader source
		GLES20.glShaderSource(shader, shaderSrc);
		// Compile the shader
		GLES20.glCompileShader(shader);
		// Check the compile status
		GLES20.glGetShaderiv(shader, GLES20.GL_COMPILE_STATUS, compiled, 0);

		if (compiled[0] == 0) {
			Log.e("ESShader", GLES20.glGetShaderInfoLog(shader));
			GLES20.glDeleteShader(shader);
			return 0;
		}
		return shader;
	}

	public static int loadProgram(String vertShaderSrc, String fragShaderSrc) {
		int vertexShader;
		int fragmentShader;
		int programObject;
		int[] linked = new int[1];

		// Load the vertex/fragment shaders
		vertexShader = loadShader(GLES20.GL_VERTEX_SHADER, vertShaderSrc);
		if (vertexShader == 0) {
			return 0;
		}

		fragmentShader = loadShader(GLES20.GL_FRAGMENT_SHADER, fragShaderSrc);
		if (fragmentShader == 0) {
			GLES20.glDeleteShader(vertexShader);
			return 0;
		}

		// Create the program object
		programObject = GLES20.glCreateProgram();

		if (programObject == 0) {
			return 0;
		}

		GLES20.glAttachShader(programObject, vertexShader);
		GLES20.glAttachShader(programObject, fragmentShader);

		// Link the program
		GLES20.glLinkProgram(programObject);

		// Check the link status
		GLES20.glGetProgramiv(programObject, GLES20.GL_LINK_STATUS, linked, 0);

		if (linked[0] == 0) {
			Log.e("ESShader", "Error linking program:");
			Log.e("ESShader", GLES20.glGetProgramInfoLog(programObject));
			GLES20.glDeleteProgram(programObject);
			return 0;
		}

		// Free up no longer needed shader resources
		GLES20.glDeleteShader(vertexShader);
		GLES20.glDeleteShader(fragmentShader);

		return programObject;
	}

	Mat mYUV = new Mat(previewFrameHeight + previewFrameWidth / 2, previewFrameWidth, CvType.CV_8UC1),
	mGrayY = mYUV.submat(0, previewFrameHeight, 0, previewFrameWidth);
	public boolean isConnected = false;
	public boolean isBack = false;
	
	@Override
	public void onPreviewFrame(byte[] data, Camera camera) {

		
		mYUV.put( 0, 0, data);
		
//		if(isConnected && isBack)
//		new Thread(this).start();
		
		if(isConnected && isBack)
		{
			isBack = false;
			if(0==FindFeatures(mGrayY.getNativeObjAddr())){
				isBack = true;		
			}
		}
		
		System.arraycopy(data, 0, yData, 0, LENGTH);
		yBuffer.put(yData);
		yBuffer.position(0);
//		Log.e("AndARRendDefTest", "yData: " + yData.length);

		System.arraycopy(data, U_INDEX, uData, 0, LENGTH_4);
		uBuffer.put(uData);
		uBuffer.position(0);
//		Log.e("AndARRendDefTest", "uData: " + uData.length);
		
		System.arraycopy(data, V_INDEX, vData, 0, LENGTH_4);
		vBuffer.put(vData);
		vBuffer.position(0);
//		Log.e("AndARRendDefTest", "vData: " + vData.length);
	}
	
	int connection = -1 ;
	static {
		System.loadLibrary("opencv_java");
        System.loadLibrary("mixed_sample");
	}
	
	  public native int FindFeatures(long matAddrGr);

//	@Override
//	public void run() {
//		lastTime = currentTime;
//		currentTime = System.currentTimeMillis();
//		totalTime += currentTime - lastTime;
//		if(totalTime > 1000){
//			totalTime -=1000;
//			fps = frames;
//			frames = 0;
//			Log.i("READPX", "fps : "+fps );
//		}
//		++frames;
//		isBack = false;
//		if(0==FindFeatures(mGrayY.getNativeObjAddr())){
//			isBack = true;		
//		}
//	}

}
