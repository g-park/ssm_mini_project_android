
package com.filtergl.shader;

import java.io.IOException;

import android.app.Activity;
import android.content.Context;
import android.graphics.ImageFormat;
import android.graphics.PixelFormat;
import android.hardware.Camera;
import android.hardware.Camera.Parameters;
import android.opengl.GLSurfaceView;
import android.os.Bundle;
import android.view.SurfaceHolder;
import android.view.SurfaceHolder.Callback;
import android.view.SurfaceView;
import android.view.Window;
import android.view.WindowManager;
import android.widget.FrameLayout;

public class ActivityFilterGL extends Activity implements Callback{
	private static final String TAG = ActivityFilterGL.class.getSimpleName();

	//openGL이 그리는 표면.
	private GLSurfaceView glSurfaceView;
	//그려주는 렌더러.
	private GLRenderer renderer;

	//하드웨어 카메라.
	private Camera camera;
	//
	private SurfaceHolder mSurfaceHolder = null;
	
	private Preview previewSurface;

	private boolean mPausing = false;
	private boolean surfaceCreated = false;
	private boolean startPreviewRightAway;
	private boolean previewing  = false;

	public ActivityFilterGL() {
		startPreviewRightAway = true;
	}

	public ActivityFilterGL(boolean startPreviewRightAway) {
		this.startPreviewRightAway = startPreviewRightAway;
	}

	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		//전체 화면 모드와 꺼지지 않게 모드 설정함.
		setFullscreen();
		disableScreenTurnOff();

		FrameLayout frame = new FrameLayout(this);
		
		previewSurface = new Preview(this);

		glSurfaceView = new GLSurfaceView(this);
		glSurfaceView.setEGLContextClientVersion(2);
		renderer = new GLRenderer(this);
		glSurfaceView.setRenderer(renderer);
		glSurfaceView.getHolder().addCallback(this);

		frame.addView(glSurfaceView);
		frame.addView(previewSurface);

		setContentView(frame);
	}

	public void disableScreenTurnOff() {
		getWindow().setFlags(
							WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON,
							WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
	}

	public void setFullscreen() {
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		getWindow().setFlags(
							WindowManager.LayoutParams.FLAG_FULLSCREEN,
							WindowManager.LayoutParams.FLAG_FULLSCREEN);
	}

	@Override
	protected void onPause() {
		mPausing = true;
		this.glSurfaceView.onPause();
		super.onPause();
		finish();
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
		System.runFinalization();
	}

	@Override
	protected void onResume() {
		mPausing = false;
		glSurfaceView.onResume();
		super.onResume();
	}


	private void openCamera() {
		if (camera == null) {
			camera = CameraHolder.instance().open();

			try {
				camera.setPreviewDisplay(mSurfaceHolder);
			} catch (IOException e1) {
				e1.printStackTrace();
			}

			Parameters params = camera.getParameters();
			params.setPreviewFormat(ImageFormat.YV12);
//			params.setPreviewSize(320, 240);
			camera.setParameters(params);

			renderer.setPreviewFrameSize(
					camera.getParameters().getPreviewSize().width,
					camera.getParameters().getPreviewSize().height);
			camera.setPreviewCallback(renderer);
		}
	}

	private void closeCamera() {
		if (camera != null) {
			CameraHolder.instance().keep();
			CameraHolder.instance().release();
			camera = null;
			previewing = false;
		}
	}

	public void startPreview() {
		if (!surfaceCreated) {
			return;
		}
		if (mPausing || isFinishing()) {
			return;
		}
		if (previewing) {
			stopPreview();
		}
		openCamera();
		camera.startPreview();
		previewing = true;
	}

	private void stopPreview() {
		if (camera != null && previewing) {
			previewing = false;
			camera.stopPreview();
		}

	}

	@Override
	public void surfaceChanged(SurfaceHolder holder, int format, int width,int height) {}


	@Override
	public void surfaceCreated(SurfaceHolder holder) {
		surfaceCreated = true;
	}

	@Override
	public void surfaceDestroyed(SurfaceHolder holder) {}

	class Preview extends SurfaceView implements SurfaceHolder.Callback {
		SurfaceHolder mHolder;
		Camera mCamera;

		Preview(Context context) {
			super(context);
			mHolder = getHolder();
			mHolder.addCallback(this);
		}

		@Override
		protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
			 this.setMeasuredDimension(2, 2);
		}

		@Override
		public void surfaceCreated(SurfaceHolder holder) {}

		@Override
		public void surfaceDestroyed(SurfaceHolder holder) {
			//프리뷰를 멈추고
			stopPreview();
			//하드웨어 카메라를 정지 시킴.
			closeCamera();
			//서페이스 홀더를 놓아
			mSurfaceHolder = null;
		}

		@Override
		public void surfaceChanged(SurfaceHolder holder, int format, int w,int h) {
			mSurfaceHolder = holder;
			if (startPreviewRightAway) {
				//바뀌면 프리뷰를 스타트함..?
				startPreview();
			}
		}
	}


}